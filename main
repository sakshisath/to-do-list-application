import json

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add_task(self, description):
        if not self.head:
            self.head = Node({"description": description})
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = Node({"description": description})

    def view_tasks(self):
        if not self.head:
            print("No tasks available:)")
        else:
            current = self.head
            task_number = 1
            while current:
                print(f"{task_number}. {current.data['description']}")
                current = current.next
                task_number += 1

    def edit_task(self, task_number, new_description):
        current = self.head
        old_description = None
        for _ in range(task_number - 1):
            if not current:
                print("Task not found:(")
                return
            current = current.next
        if current:
            old_description = current.data["description"]
            current.data["description"] = new_description
            print("Task updated!")
        return old_description

    def delete_task(self, index):
        description = None
        if index == 0:
            if self.head:
                description = self.head.data["description"]
                self.head = self.head.next
                print("Task deleted!")
        else:
            current = self.head
            prev = None
            count = 0
            while current and count != index:
                prev = current
                current = current.next
                count += 1
            if current:
                description = current.data["description"]
                prev.next = current.next
                print("Task deleted!")
        return description

    def insert_task_at(self, index, description):
        new_node = Node({"description": description})
        if index == 0:
            new_node.next = self.head
            self.head = new_node
        else:
            current = self.head
            prev = None
            count = 0
            while current and count != index:
                prev = current
                current = current.next
                count += 1
            if prev:
                prev.next = new_node
                new_node.next = current

    def length(self):
        current = self.head
        count = 0
        while current:
            count += 1
            current = current.next
        return count

    def to_list(self):
        tasks = []
        current = self.head
        while current:
            tasks.append(current.data)
            current = current.next
        return tasks

    def from_list(self, tasks):
        self.head = None
        for task in tasks:
            self.add_task(task["description"])

class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()

    def is_empty(self):
        return len(self.items) == 0

class HashTable:
    def __init__(self):
        self.hash_table = {}

    def add_task(self, description, keywords):
        for keyword in keywords:
            if keyword in self.hash_table:
                self.hash_table[keyword].append(description)
            else:
                self.hash_table[keyword] = [description]

    def search_tasks(self, keyword):
        if keyword in self.hash_table:
            print(f"Tasks related to keyword '{keyword}':")
            for task in self.hash_table[keyword]:
                print(task)
        else:
            print(f"No tasks found related to keyword '{keyword}'")

def save_tasks_to_file(tasks, filename):
    with open(filename, 'w') as file:
        json.dump(tasks.to_list(), file)
    print(f"Tasks saved to {filename}")

def load_tasks_from_file(filename):
    with open(filename, 'r') as file:
        tasks_data = json.load(file)
    tasks = LinkedList()
    tasks.from_list(tasks_data)
    print(f"Tasks loaded from {filename}")
    return tasks

def main():
    tasks = LinkedList()
    undo_stack = Stack()
    hash_table = HashTable()
    filename = "tasks.json"

    options = "\n1. Add tasks\n2. View Tasks\n3. Edit tasks\n4. Delete task\n5. Search Tasks\n6. Undo\n7. Save Tasks\n8. Load Tasks\n9. Exit To-Do List\n"

    print("Welcome to Your To-Do List!" + options)

    while True:
        choice = input("What would you like to do to your list?: ")

        if choice == '1':
            description = input("Enter task: ")
            tasks.add_task(description)
            keywords = input("Enter keywords/tags (comma-separated): ").split(',')
            hash_table.add_task(description, keywords)
            print("Task added successfully!")
            undo_stack.push(("add", description, keywords))
            tasks.view_tasks()

        elif choice == '2':
            print("Here are your current tasks! Good luck!")
            tasks.view_tasks()

        elif choice == '3':
            task_number = int(input("Enter task number to edit: "))
            new_description = input("Enter edited task: ")
            old_description = tasks.edit_task(task_number, new_description)
            undo_stack.push(("edit", task_number, old_description, new_description))
            tasks.view_tasks()

        elif choice == '4':
            task_number = int(input("Enter task number to delete: "))
            description = tasks.delete_task(task_number - 1)  # Adjusting task number for zero-based indexing
            keywords = input("Enter keywords/tags (comma-separated): ").split(',')
            undo_stack.push(("delete", task_number - 1, description, keywords))
            tasks.view_tasks()

        elif choice == '5':
            keyword = input("Enter keyword to search tasks: ")
            hash_table.search_tasks(keyword)

        elif choice == '6':
            if not undo_stack.is_empty():
                action = undo_stack.pop()
                if action[0] == "add":
                    tasks.delete_task(tasks.length() - 1)  # Revert add action
                    for keyword in action[2]:  # Ensure keywords are removed from hash table
                        if keyword in hash_table.hash_table and action[1] in hash_table.hash_table[keyword]:
                            hash_table.hash_table[keyword].remove(action[1])
                elif action[0] == "edit":
                    tasks.edit_task(action[1], action[2])  # Revert edit action
                    new_keywords = action[3].split(',')
                    old_keywords = action[2].split(',')
                    for keyword in new_keywords:  # Remove new description from hash table
                        if keyword in hash_table.hash_table and action[3] in hash_table.hash_table[keyword]:
                            hash_table.hash_table[keyword].remove(action[3])
                    for keyword in old_keywords:  # Add old description back to hash table
                        if keyword in hash_table.hash_table:
                            hash_table.hash_table[keyword].append(action[2])
                        else:
                            hash_table.hash_table[keyword] = [action[2]]
                elif action[0] == "delete":
                    task_number = action[1]
                    description = action[2]
                    tasks.insert_task_at(task_number, description)  # Revert delete action
                    keywords = action[3]
                    hash_table.add_task(description, keywords)  # Add back to hash table
                print("Undo successful!")
                tasks.view_tasks()
            else:
                print("Nothing to undo!")

        elif choice == '7':
            save_tasks_to_file(tasks, filename)

        elif choice == '8':
            tasks = load_tasks_from_file(filename)

        elif choice == '9':
            print("Exiting To-Do List")
            break

        else:
            print("Invalid choice:( Please try again!")

        print(options)

if __name__ == "__main__":
    main()
